{
  "stats": {
    "suites": 7,
    "tests": 12,
    "passes": 11,
    "pending": 0,
    "failures": 1,
    "start": "2017-11-09T14:53:56.840Z",
    "end": "2017-11-09T14:53:57.028Z",
    "duration": 188,
    "testsRegistered": 12,
    "passPercent": 91.7,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "/GET BrandingDetails",
        "suites": [],
        "tests": [
          {
            "title": "it should GET the branding details",
            "fullTitle": "/GET BrandingDetails it should GET the branding details",
            "timedOut": false,
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.get('/brandingDetails')\n.end((err, res) => {\n  expect(res).to.have.status(200);      //  expect(res.statusCode).to.equal(200);\n  expect(res).to.be.json;               //  Check if response is object/json\n  expect(res.body).to.be.an('object');  //  expect(typeof res.body).to.be(\"Object\");\n  expect(res.body).to.not.equal(null);\n  expect(res.body).to.have.property('primary_color');\n  expect(res.body).to.have.property('danger_color');\n  expect(res.body).to.have.property('warning_color');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0c40b020-156c-4fbe-a84d-358ef5e51e41",
            "parentUUID": "9d4176f4-c113-480f-8e95-202cf9998d3f",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\test.js",
        "uuid": "9d4176f4-c113-480f-8e95-202cf9998d3f",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\Users\\Pranay Katiyar\\Desktop\\Takeda TryMe\\test\\test.js",
        "passes": [
          {
            "title": "it should GET the branding details",
            "fullTitle": "/GET BrandingDetails it should GET the branding details",
            "timedOut": false,
            "duration": 28,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.get('/brandingDetails')\n.end((err, res) => {\n  expect(res).to.have.status(200);      //  expect(res.statusCode).to.equal(200);\n  expect(res).to.be.json;               //  Check if response is object/json\n  expect(res.body).to.be.an('object');  //  expect(typeof res.body).to.be(\"Object\");\n  expect(res.body).to.not.equal(null);\n  expect(res.body).to.have.property('primary_color');\n  expect(res.body).to.have.property('danger_color');\n  expect(res.body).to.have.property('warning_color');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0c40b020-156c-4fbe-a84d-358ef5e51e41",
            "parentUUID": "9d4176f4-c113-480f-8e95-202cf9998d3f",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 28,
        "rootEmpty": false
      },
      {
        "title": "/POST Signup",
        "suites": [],
        "tests": [
          {
            "title": "it should POST duplicate user signup details",
            "fullTitle": "/POST Signup it should POST duplicate user signup details",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/signup')\n.send({emailId : mockData.validEmailId, password : mockData.validPassword, nickName : mockData.validNickName})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('User already registered with this email');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8a76f984-642e-4b20-997d-f227cebc21d6",
            "parentUUID": "4f912aa1-bb2c-4b49-8f7d-81f4b594e270",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should POST invalid parameters",
            "fullTitle": "/POST Signup it should POST invalid parameters",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/signup')\n.send({emailId : mockData.validEmailId, password : mockData.invalidParams, nickName : mockData.validNickName})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('Validation Failed');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3d112e59-67ac-47ed-98d1-fc0a392534ad",
            "parentUUID": "4f912aa1-bb2c-4b49-8f7d-81f4b594e270",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\test.js",
        "uuid": "4f912aa1-bb2c-4b49-8f7d-81f4b594e270",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\Users\\Pranay Katiyar\\Desktop\\Takeda TryMe\\test\\test.js",
        "passes": [
          {
            "title": "it should POST duplicate user signup details",
            "fullTitle": "/POST Signup it should POST duplicate user signup details",
            "timedOut": false,
            "duration": 22,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/signup')\n.send({emailId : mockData.validEmailId, password : mockData.validPassword, nickName : mockData.validNickName})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('User already registered with this email');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8a76f984-642e-4b20-997d-f227cebc21d6",
            "parentUUID": "4f912aa1-bb2c-4b49-8f7d-81f4b594e270",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should POST invalid parameters",
            "fullTitle": "/POST Signup it should POST invalid parameters",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/signup')\n.send({emailId : mockData.validEmailId, password : mockData.invalidParams, nickName : mockData.validNickName})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('Validation Failed');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3d112e59-67ac-47ed-98d1-fc0a392534ad",
            "parentUUID": "4f912aa1-bb2c-4b49-8f7d-81f4b594e270",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 29,
        "rootEmpty": false
      },
      {
        "title": "/POST Login",
        "suites": [],
        "tests": [
          {
            "title": "it should POST user login details",
            "fullTitle": "/POST Login it should POST user login details",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/login')\n.send({emailId : mockData.validEmailId, password : mockData.validPassword})\n.end((err, res) => {\n  expect(res).to.have.status(200);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('success');\n  expect(res.body).to.have.property('access-token');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3460593a-3320-4ae4-b5ca-0ad497990f94",
            "parentUUID": "bcb977ca-7667-421e-a289-1c23a07e0be6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should POST wrong user password for login",
            "fullTitle": "/POST Login it should POST wrong user password for login",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/login')\n.send({emailId : mockData.validEmailId, password : mockData.invalidPassword})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.property('message');\n  expect(res.body.message).to.equal('You have enter wrong password');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "47bb13f9-7a82-40d7-aed8-09ca6e174a56",
            "parentUUID": "bcb977ca-7667-421e-a289-1c23a07e0be6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should POST wrong user email for login",
            "fullTitle": "/POST Login it should POST wrong user email for login",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/login')\n.send({emailId : mockData.invalidEmailId, password : mockData.validPassword})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('Email address is not available');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2d02fdcf-e203-429e-980c-4189d4ad89ca",
            "parentUUID": "bcb977ca-7667-421e-a289-1c23a07e0be6",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\test.js",
        "uuid": "bcb977ca-7667-421e-a289-1c23a07e0be6",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\Users\\Pranay Katiyar\\Desktop\\Takeda TryMe\\test\\test.js",
        "passes": [
          {
            "title": "it should POST user login details",
            "fullTitle": "/POST Login it should POST user login details",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/login')\n.send({emailId : mockData.validEmailId, password : mockData.validPassword})\n.end((err, res) => {\n  expect(res).to.have.status(200);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('success');\n  expect(res.body).to.have.property('access-token');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "3460593a-3320-4ae4-b5ca-0ad497990f94",
            "parentUUID": "bcb977ca-7667-421e-a289-1c23a07e0be6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should POST wrong user password for login",
            "fullTitle": "/POST Login it should POST wrong user password for login",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/login')\n.send({emailId : mockData.validEmailId, password : mockData.invalidPassword})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.property('message');\n  expect(res.body.message).to.equal('You have enter wrong password');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "47bb13f9-7a82-40d7-aed8-09ca6e174a56",
            "parentUUID": "bcb977ca-7667-421e-a289-1c23a07e0be6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should POST wrong user email for login",
            "fullTitle": "/POST Login it should POST wrong user email for login",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/login')\n.send({emailId : mockData.invalidEmailId, password : mockData.validPassword})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('Email address is not available');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2d02fdcf-e203-429e-980c-4189d4ad89ca",
            "parentUUID": "bcb977ca-7667-421e-a289-1c23a07e0be6",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 28,
        "rootEmpty": false
      },
      {
        "title": "/POST Refresh Token",
        "suites": [],
        "tests": [
          {
            "title": "it should be able to generate refresh token",
            "fullTitle": "/POST Refresh Token it should be able to generate refresh token",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/refreshToken')\n.set('x-access-token', mockData.validToken)\n.end((err, res) => {\n   expect(res).to.have.status(200);\n   expect(res).to.be.json;\n   expect(res.body).to.be.an('object');\n   expect(res.body).to.have.property('status');\n   expect(res.body.status).to.equal('success');\n   expect(res.body).to.have.property('access-token');\n   done();\n });",
            "err": {},
            "isRoot": false,
            "uuid": "900a2cbd-05a8-40e2-a50f-b5ae1f682166",
            "parentUUID": "36fe3016-6f64-421c-8a3d-5e30084ecd6c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should POST the invalid access token",
            "fullTitle": "/POST Refresh Token it should POST the invalid access token",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/refreshToken')\n.set('x-access-token', mockData.invalidToken)\n.end((err, res) => {\n   expect(res).to.have.status(401);\n   expect(res).to.be.json;\n   expect(res.body).to.be.an('object');\n   expect(res.body).to.have.property('status');\n   expect(res.body.status).to.equal('error');\n   expect(res.body).to.have.property('message');\n   expect(res.body.message).to.equal('Invalid token');\n   done();\n });",
            "err": {},
            "isRoot": false,
            "uuid": "bf62d283-c37b-497b-9c69-40df35e7493b",
            "parentUUID": "36fe3016-6f64-421c-8a3d-5e30084ecd6c",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\test.js",
        "uuid": "36fe3016-6f64-421c-8a3d-5e30084ecd6c",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\Users\\Pranay Katiyar\\Desktop\\Takeda TryMe\\test\\test.js",
        "passes": [
          {
            "title": "it should be able to generate refresh token",
            "fullTitle": "/POST Refresh Token it should be able to generate refresh token",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/refreshToken')\n.set('x-access-token', mockData.validToken)\n.end((err, res) => {\n   expect(res).to.have.status(200);\n   expect(res).to.be.json;\n   expect(res.body).to.be.an('object');\n   expect(res.body).to.have.property('status');\n   expect(res.body.status).to.equal('success');\n   expect(res.body).to.have.property('access-token');\n   done();\n });",
            "err": {},
            "isRoot": false,
            "uuid": "900a2cbd-05a8-40e2-a50f-b5ae1f682166",
            "parentUUID": "36fe3016-6f64-421c-8a3d-5e30084ecd6c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should POST the invalid access token",
            "fullTitle": "/POST Refresh Token it should POST the invalid access token",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/refreshToken')\n.set('x-access-token', mockData.invalidToken)\n.end((err, res) => {\n   expect(res).to.have.status(401);\n   expect(res).to.be.json;\n   expect(res.body).to.be.an('object');\n   expect(res.body).to.have.property('status');\n   expect(res.body.status).to.equal('error');\n   expect(res.body).to.have.property('message');\n   expect(res.body.message).to.equal('Invalid token');\n   done();\n });",
            "err": {},
            "isRoot": false,
            "uuid": "bf62d283-c37b-497b-9c69-40df35e7493b",
            "parentUUID": "36fe3016-6f64-421c-8a3d-5e30084ecd6c",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 14,
        "rootEmpty": false
      },
      {
        "title": "/POST Change Password",
        "suites": [],
        "tests": [
          {
            "title": "it should change the user password",
            "fullTitle": "/POST Change Password it should change the user password",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "API_SERVER\n.post('/changePassword')\n.set('x-access-token', mockData.validToken)\n.send({oldPassword: mockData.validPassword, newPassword: mockData.validPassword})\n.end((err, res) => {\n   expect(res).to.have.status(200);\n   expect(res).to.be.json;\n   expect(res.body).to.be.an('object');\n   expect(res.body).to.have.property('status');\n   expect(res.body.status).to.equal('success');\n   expect(res.body).to.have.property('message');\n   expect(res.body.message).to.equal('Password successfully changed');\n   expect(res.body).to.have.property('access-token');\n   done();\n });",
            "err": {
              "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 401",
              "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 401\n    at API_SERVER.post.set.send.end (test\\test.js:170:28)\n    at Test.Request.callback (node_modules\\chai-http\\node_modules\\superagent\\lib\\node\\index.js:631:3)\n    at node_modules\\chai-http\\node_modules\\superagent\\lib\\node\\index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules\\chai-http\\node_modules\\superagent\\lib\\node\\parsers\\json.js:16:7)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\n    at process._tickCallback (internal/process/next_tick.js:98:9)",
              "diff": "- 401\n+ 200\n"
            },
            "isRoot": false,
            "uuid": "25a2c185-6ade-465e-81d9-88934df804f0",
            "parentUUID": "ab85c2c4-70e4-4f96-b1c6-2eea99a9196c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should POST invalid user password for change password",
            "fullTitle": "/POST Change Password it should POST invalid user password for change password",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/changePassword')\n.set('x-access-token', mockData.validToken)\n.send({oldPassword: mockData.invalidPassword, newPassword: mockData.validPassword})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('You have enter wrong password');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ed20d0f7-2634-4769-b5a7-17af1993566e",
            "parentUUID": "ab85c2c4-70e4-4f96-b1c6-2eea99a9196c",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\test.js",
        "uuid": "ab85c2c4-70e4-4f96-b1c6-2eea99a9196c",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\Users\\Pranay Katiyar\\Desktop\\Takeda TryMe\\test\\test.js",
        "passes": [
          {
            "title": "it should POST invalid user password for change password",
            "fullTitle": "/POST Change Password it should POST invalid user password for change password",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.post('/changePassword')\n.set('x-access-token', mockData.validToken)\n.send({oldPassword: mockData.invalidPassword, newPassword: mockData.validPassword})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('You have enter wrong password');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ed20d0f7-2634-4769-b5a7-17af1993566e",
            "parentUUID": "ab85c2c4-70e4-4f96-b1c6-2eea99a9196c",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [
          {
            "title": "it should change the user password",
            "fullTitle": "/POST Change Password it should change the user password",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "API_SERVER\n.post('/changePassword')\n.set('x-access-token', mockData.validToken)\n.send({oldPassword: mockData.validPassword, newPassword: mockData.validPassword})\n.end((err, res) => {\n   expect(res).to.have.status(200);\n   expect(res).to.be.json;\n   expect(res.body).to.be.an('object');\n   expect(res.body).to.have.property('status');\n   expect(res.body.status).to.equal('success');\n   expect(res.body).to.have.property('message');\n   expect(res.body.message).to.equal('Password successfully changed');\n   expect(res.body).to.have.property('access-token');\n   done();\n });",
            "err": {
              "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 401",
              "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 401\n    at API_SERVER.post.set.send.end (test\\test.js:170:28)\n    at Test.Request.callback (node_modules\\chai-http\\node_modules\\superagent\\lib\\node\\index.js:631:3)\n    at node_modules\\chai-http\\node_modules\\superagent\\lib\\node\\index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules\\chai-http\\node_modules\\superagent\\lib\\node\\parsers\\json.js:16:7)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\n    at process._tickCallback (internal/process/next_tick.js:98:9)",
              "diff": "- 401\n+ 200\n"
            },
            "isRoot": false,
            "uuid": "25a2c185-6ade-465e-81d9-88934df804f0",
            "parentUUID": "ab85c2c4-70e4-4f96-b1c6-2eea99a9196c",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 1,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 11,
        "rootEmpty": false
      },
      {
        "title": "/GET documentList",
        "suites": [],
        "tests": [
          {
            "title": "it should GET document list",
            "fullTitle": "/GET documentList it should GET document list",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.get('/documentList')\n.set('x-access-token', mockData.validToken)\n.end((err, res) => {\n  expect(res).to.have.status(200);\n  expect(res.body).to.be.an('array');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c63db51a-7eae-474d-b900-964c23f1767c",
            "parentUUID": "271da5dd-0c6b-4f4b-820d-9d5fe2316516",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\test.js",
        "uuid": "271da5dd-0c6b-4f4b-820d-9d5fe2316516",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\Users\\Pranay Katiyar\\Desktop\\Takeda TryMe\\test\\test.js",
        "passes": [
          {
            "title": "it should GET document list",
            "fullTitle": "/GET documentList it should GET document list",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.get('/documentList')\n.set('x-access-token', mockData.validToken)\n.end((err, res) => {\n  expect(res).to.have.status(200);\n  expect(res.body).to.be.an('array');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c63db51a-7eae-474d-b900-964c23f1767c",
            "parentUUID": "271da5dd-0c6b-4f4b-820d-9d5fe2316516",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 5,
        "rootEmpty": false
      },
      {
        "title": "/GET documentDetails",
        "suites": [],
        "tests": [
          {
            "title": "it should GET document details",
            "fullTitle": "/GET documentDetails it should GET document details",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.get('/1/documentDetails')\n.set('x-access-token', mockData.validToken)\n.end((err, res) => {\n  expect(res).to.have.status(200);\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('success');\n  expect(res.body).to.have.property('documentDescription');\n  expect(res.body).to.have.property('simplifiedDocument');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "91f2395a-a1ff-45bf-96a2-bbae4ef71caa",
            "parentUUID": "d8866b93-a0eb-44c3-9081-b4200110e6e1",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\test.js",
        "uuid": "d8866b93-a0eb-44c3-9081-b4200110e6e1",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "C:\\Users\\Pranay Katiyar\\Desktop\\Takeda TryMe\\test\\test.js",
        "passes": [
          {
            "title": "it should GET document details",
            "fullTitle": "/GET documentDetails it should GET document details",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "API_SERVER\n.get('/1/documentDetails')\n.set('x-access-token', mockData.validToken)\n.end((err, res) => {\n  expect(res).to.have.status(200);\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('success');\n  expect(res.body).to.have.property('documentDescription');\n  expect(res.body).to.have.property('simplifiedDocument');\n  done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "91f2395a-a1ff-45bf-96a2-bbae4ef71caa",
            "parentUUID": "d8866b93-a0eb-44c3-9081-b4200110e6e1",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 7,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "f795085a-4ecb-4c01-a025-6980402a8492",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "it should GET the branding details",
      "fullTitle": "/GET BrandingDetails it should GET the branding details",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.get('/brandingDetails')\n.end((err, res) => {\n  expect(res).to.have.status(200);      //  expect(res.statusCode).to.equal(200);\n  expect(res).to.be.json;               //  Check if response is object/json\n  expect(res.body).to.be.an('object');  //  expect(typeof res.body).to.be(\"Object\");\n  expect(res.body).to.not.equal(null);\n  expect(res.body).to.have.property('primary_color');\n  expect(res.body).to.have.property('danger_color');\n  expect(res.body).to.have.property('warning_color');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0c40b020-156c-4fbe-a84d-358ef5e51e41",
      "parentUUID": "9d4176f4-c113-480f-8e95-202cf9998d3f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should POST duplicate user signup details",
      "fullTitle": "/POST Signup it should POST duplicate user signup details",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/signup')\n.send({emailId : mockData.validEmailId, password : mockData.validPassword, nickName : mockData.validNickName})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('User already registered with this email');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8a76f984-642e-4b20-997d-f227cebc21d6",
      "parentUUID": "4f912aa1-bb2c-4b49-8f7d-81f4b594e270",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should POST invalid parameters",
      "fullTitle": "/POST Signup it should POST invalid parameters",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/signup')\n.send({emailId : mockData.validEmailId, password : mockData.invalidParams, nickName : mockData.validNickName})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('Validation Failed');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3d112e59-67ac-47ed-98d1-fc0a392534ad",
      "parentUUID": "4f912aa1-bb2c-4b49-8f7d-81f4b594e270",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should POST user login details",
      "fullTitle": "/POST Login it should POST user login details",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/login')\n.send({emailId : mockData.validEmailId, password : mockData.validPassword})\n.end((err, res) => {\n  expect(res).to.have.status(200);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('success');\n  expect(res.body).to.have.property('access-token');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3460593a-3320-4ae4-b5ca-0ad497990f94",
      "parentUUID": "bcb977ca-7667-421e-a289-1c23a07e0be6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should POST wrong user password for login",
      "fullTitle": "/POST Login it should POST wrong user password for login",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/login')\n.send({emailId : mockData.validEmailId, password : mockData.invalidPassword})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.property('message');\n  expect(res.body.message).to.equal('You have enter wrong password');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "47bb13f9-7a82-40d7-aed8-09ca6e174a56",
      "parentUUID": "bcb977ca-7667-421e-a289-1c23a07e0be6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should POST wrong user email for login",
      "fullTitle": "/POST Login it should POST wrong user email for login",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/login')\n.send({emailId : mockData.invalidEmailId, password : mockData.validPassword})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('Email address is not available');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2d02fdcf-e203-429e-980c-4189d4ad89ca",
      "parentUUID": "bcb977ca-7667-421e-a289-1c23a07e0be6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should be able to generate refresh token",
      "fullTitle": "/POST Refresh Token it should be able to generate refresh token",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/refreshToken')\n.set('x-access-token', mockData.validToken)\n.end((err, res) => {\n   expect(res).to.have.status(200);\n   expect(res).to.be.json;\n   expect(res.body).to.be.an('object');\n   expect(res.body).to.have.property('status');\n   expect(res.body.status).to.equal('success');\n   expect(res.body).to.have.property('access-token');\n   done();\n });",
      "err": {},
      "isRoot": false,
      "uuid": "900a2cbd-05a8-40e2-a50f-b5ae1f682166",
      "parentUUID": "36fe3016-6f64-421c-8a3d-5e30084ecd6c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should POST the invalid access token",
      "fullTitle": "/POST Refresh Token it should POST the invalid access token",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/refreshToken')\n.set('x-access-token', mockData.invalidToken)\n.end((err, res) => {\n   expect(res).to.have.status(401);\n   expect(res).to.be.json;\n   expect(res.body).to.be.an('object');\n   expect(res.body).to.have.property('status');\n   expect(res.body.status).to.equal('error');\n   expect(res.body).to.have.property('message');\n   expect(res.body.message).to.equal('Invalid token');\n   done();\n });",
      "err": {},
      "isRoot": false,
      "uuid": "bf62d283-c37b-497b-9c69-40df35e7493b",
      "parentUUID": "36fe3016-6f64-421c-8a3d-5e30084ecd6c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should change the user password",
      "fullTitle": "/POST Change Password it should change the user password",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "API_SERVER\n.post('/changePassword')\n.set('x-access-token', mockData.validToken)\n.send({oldPassword: mockData.validPassword, newPassword: mockData.validPassword})\n.end((err, res) => {\n   expect(res).to.have.status(200);\n   expect(res).to.be.json;\n   expect(res.body).to.be.an('object');\n   expect(res.body).to.have.property('status');\n   expect(res.body.status).to.equal('success');\n   expect(res.body).to.have.property('message');\n   expect(res.body.message).to.equal('Password successfully changed');\n   expect(res.body).to.have.property('access-token');\n   done();\n });",
      "err": {
        "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 401",
        "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 401\n    at API_SERVER.post.set.send.end (test\\test.js:170:28)\n    at Test.Request.callback (node_modules\\chai-http\\node_modules\\superagent\\lib\\node\\index.js:631:3)\n    at node_modules\\chai-http\\node_modules\\superagent\\lib\\node\\index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules\\chai-http\\node_modules\\superagent\\lib\\node\\parsers\\json.js:16:7)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\n    at process._tickCallback (internal/process/next_tick.js:98:9)",
        "diff": "- 401\n+ 200\n"
      },
      "isRoot": false,
      "uuid": "25a2c185-6ade-465e-81d9-88934df804f0",
      "parentUUID": "ab85c2c4-70e4-4f96-b1c6-2eea99a9196c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should POST invalid user password for change password",
      "fullTitle": "/POST Change Password it should POST invalid user password for change password",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/changePassword')\n.set('x-access-token', mockData.validToken)\n.send({oldPassword: mockData.invalidPassword, newPassword: mockData.validPassword})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('You have enter wrong password');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ed20d0f7-2634-4769-b5a7-17af1993566e",
      "parentUUID": "ab85c2c4-70e4-4f96-b1c6-2eea99a9196c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should GET document list",
      "fullTitle": "/GET documentList it should GET document list",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.get('/documentList')\n.set('x-access-token', mockData.validToken)\n.end((err, res) => {\n  expect(res).to.have.status(200);\n  expect(res.body).to.be.an('array');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c63db51a-7eae-474d-b900-964c23f1767c",
      "parentUUID": "271da5dd-0c6b-4f4b-820d-9d5fe2316516",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should GET document details",
      "fullTitle": "/GET documentDetails it should GET document details",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.get('/1/documentDetails')\n.set('x-access-token', mockData.validToken)\n.end((err, res) => {\n  expect(res).to.have.status(200);\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('success');\n  expect(res.body).to.have.property('documentDescription');\n  expect(res.body).to.have.property('simplifiedDocument');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "91f2395a-a1ff-45bf-96a2-bbae4ef71caa",
      "parentUUID": "d8866b93-a0eb-44c3-9081-b4200110e6e1",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "it should GET the branding details",
      "fullTitle": "/GET BrandingDetails it should GET the branding details",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.get('/brandingDetails')\n.end((err, res) => {\n  expect(res).to.have.status(200);      //  expect(res.statusCode).to.equal(200);\n  expect(res).to.be.json;               //  Check if response is object/json\n  expect(res.body).to.be.an('object');  //  expect(typeof res.body).to.be(\"Object\");\n  expect(res.body).to.not.equal(null);\n  expect(res.body).to.have.property('primary_color');\n  expect(res.body).to.have.property('danger_color');\n  expect(res.body).to.have.property('warning_color');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "0c40b020-156c-4fbe-a84d-358ef5e51e41",
      "parentUUID": "9d4176f4-c113-480f-8e95-202cf9998d3f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should POST duplicate user signup details",
      "fullTitle": "/POST Signup it should POST duplicate user signup details",
      "timedOut": false,
      "duration": 22,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/signup')\n.send({emailId : mockData.validEmailId, password : mockData.validPassword, nickName : mockData.validNickName})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('User already registered with this email');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "8a76f984-642e-4b20-997d-f227cebc21d6",
      "parentUUID": "4f912aa1-bb2c-4b49-8f7d-81f4b594e270",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should POST invalid parameters",
      "fullTitle": "/POST Signup it should POST invalid parameters",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/signup')\n.send({emailId : mockData.validEmailId, password : mockData.invalidParams, nickName : mockData.validNickName})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('Validation Failed');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3d112e59-67ac-47ed-98d1-fc0a392534ad",
      "parentUUID": "4f912aa1-bb2c-4b49-8f7d-81f4b594e270",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should POST user login details",
      "fullTitle": "/POST Login it should POST user login details",
      "timedOut": false,
      "duration": 12,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/login')\n.send({emailId : mockData.validEmailId, password : mockData.validPassword})\n.end((err, res) => {\n  expect(res).to.have.status(200);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('success');\n  expect(res.body).to.have.property('access-token');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "3460593a-3320-4ae4-b5ca-0ad497990f94",
      "parentUUID": "bcb977ca-7667-421e-a289-1c23a07e0be6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should POST wrong user password for login",
      "fullTitle": "/POST Login it should POST wrong user password for login",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/login')\n.send({emailId : mockData.validEmailId, password : mockData.invalidPassword})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.property('message');\n  expect(res.body.message).to.equal('You have enter wrong password');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "47bb13f9-7a82-40d7-aed8-09ca6e174a56",
      "parentUUID": "bcb977ca-7667-421e-a289-1c23a07e0be6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should POST wrong user email for login",
      "fullTitle": "/POST Login it should POST wrong user email for login",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/login')\n.send({emailId : mockData.invalidEmailId, password : mockData.validPassword})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('Email address is not available');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "2d02fdcf-e203-429e-980c-4189d4ad89ca",
      "parentUUID": "bcb977ca-7667-421e-a289-1c23a07e0be6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should be able to generate refresh token",
      "fullTitle": "/POST Refresh Token it should be able to generate refresh token",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/refreshToken')\n.set('x-access-token', mockData.validToken)\n.end((err, res) => {\n   expect(res).to.have.status(200);\n   expect(res).to.be.json;\n   expect(res.body).to.be.an('object');\n   expect(res.body).to.have.property('status');\n   expect(res.body.status).to.equal('success');\n   expect(res.body).to.have.property('access-token');\n   done();\n });",
      "err": {},
      "isRoot": false,
      "uuid": "900a2cbd-05a8-40e2-a50f-b5ae1f682166",
      "parentUUID": "36fe3016-6f64-421c-8a3d-5e30084ecd6c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should POST the invalid access token",
      "fullTitle": "/POST Refresh Token it should POST the invalid access token",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/refreshToken')\n.set('x-access-token', mockData.invalidToken)\n.end((err, res) => {\n   expect(res).to.have.status(401);\n   expect(res).to.be.json;\n   expect(res.body).to.be.an('object');\n   expect(res.body).to.have.property('status');\n   expect(res.body.status).to.equal('error');\n   expect(res.body).to.have.property('message');\n   expect(res.body.message).to.equal('Invalid token');\n   done();\n });",
      "err": {},
      "isRoot": false,
      "uuid": "bf62d283-c37b-497b-9c69-40df35e7493b",
      "parentUUID": "36fe3016-6f64-421c-8a3d-5e30084ecd6c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should POST invalid user password for change password",
      "fullTitle": "/POST Change Password it should POST invalid user password for change password",
      "timedOut": false,
      "duration": 11,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.post('/changePassword')\n.set('x-access-token', mockData.validToken)\n.send({oldPassword: mockData.invalidPassword, newPassword: mockData.validPassword})\n.end((err, res) => {\n  expect(res).to.have.status(401);\n  expect(res).to.be.json;\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('error');\n  expect(res.body).to.have.property('message');\n  expect(res.body.message).to.equal('You have enter wrong password');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "ed20d0f7-2634-4769-b5a7-17af1993566e",
      "parentUUID": "ab85c2c4-70e4-4f96-b1c6-2eea99a9196c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should GET document list",
      "fullTitle": "/GET documentList it should GET document list",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.get('/documentList')\n.set('x-access-token', mockData.validToken)\n.end((err, res) => {\n  expect(res).to.have.status(200);\n  expect(res.body).to.be.an('array');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "c63db51a-7eae-474d-b900-964c23f1767c",
      "parentUUID": "271da5dd-0c6b-4f4b-820d-9d5fe2316516",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "it should GET document details",
      "fullTitle": "/GET documentDetails it should GET document details",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "API_SERVER\n.get('/1/documentDetails')\n.set('x-access-token', mockData.validToken)\n.end((err, res) => {\n  expect(res).to.have.status(200);\n  expect(res.body).to.be.an('object');\n  expect(res.body).to.have.property('status');\n  expect(res.body.status).to.equal('success');\n  expect(res.body).to.have.property('documentDescription');\n  expect(res.body).to.have.property('simplifiedDocument');\n  done();\n});",
      "err": {},
      "isRoot": false,
      "uuid": "91f2395a-a1ff-45bf-96a2-bbae4ef71caa",
      "parentUUID": "d8866b93-a0eb-44c3-9081-b4200110e6e1",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "it should change the user password",
      "fullTitle": "/POST Change Password it should change the user password",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "API_SERVER\n.post('/changePassword')\n.set('x-access-token', mockData.validToken)\n.send({oldPassword: mockData.validPassword, newPassword: mockData.validPassword})\n.end((err, res) => {\n   expect(res).to.have.status(200);\n   expect(res).to.be.json;\n   expect(res.body).to.be.an('object');\n   expect(res.body).to.have.property('status');\n   expect(res.body.status).to.equal('success');\n   expect(res.body).to.have.property('message');\n   expect(res.body.message).to.equal('Password successfully changed');\n   expect(res.body).to.have.property('access-token');\n   done();\n });",
      "err": {
        "message": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 401",
        "estack": "AssertionError: expected { Object (domain, _events, ...) } to have status code 200 but got 401\n    at API_SERVER.post.set.send.end (test\\test.js:170:28)\n    at Test.Request.callback (node_modules\\chai-http\\node_modules\\superagent\\lib\\node\\index.js:631:3)\n    at node_modules\\chai-http\\node_modules\\superagent\\lib\\node\\index.js:795:18\n    at IncomingMessage.<anonymous> (node_modules\\chai-http\\node_modules\\superagent\\lib\\node\\parsers\\json.js:16:7)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\n    at process._tickCallback (internal/process/next_tick.js:98:9)",
        "diff": "- 401\n+ 200\n"
      },
      "isRoot": false,
      "uuid": "25a2c185-6ade-465e-81d9-88934df804f0",
      "parentUUID": "ab85c2c4-70e4-4f96-b1c6-2eea99a9196c",
      "isHook": false,
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}